# Generated by Django 5.1.4 on 2025-07-03 12:19

import backend.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContactAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True)),
                ('total_messages', models.PositiveIntegerField(default=0)),
                ('new_messages', models.PositiveIntegerField(default=0)),
                ('resolved_messages', models.PositiveIntegerField(default=0)),
                ('avg_response_time_hours', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
            ],
            options={
                'verbose_name': 'Analyse des contacts',
                'verbose_name_plural': 'Analyses des contacts',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='PartnerAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True)),
                ('total_applications', models.PositiveIntegerField(default=0)),
                ('pending_applications', models.PositiveIntegerField(default=0)),
                ('approved_applications', models.PositiveIntegerField(default=0)),
                ('rejected_applications', models.PositiveIntegerField(default=0)),
                ('restaurant_applications', models.PositiveIntegerField(default=0)),
                ('delivery_applications', models.PositiveIntegerField(default=0)),
                ('investor_applications', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Analyse des partenaires',
                'verbose_name_plural': 'Analyses des partenaires',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_type', models.CharField(choices=[('customer', 'Customer'), ('restaurant', 'Restaurant'), ('delivery_agent', 'Delivery Agent'), ('admin', 'Admin')], default='customer', max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$')])),
                ('is_phone_verified', models.BooleanField(default=False)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='backend_user_set', related_query_name='backend_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='backend_user_set', related_query_name='backend_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ContactMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('email', models.EmailField(max_length=254, validators=[django.core.validators.EmailValidator()], verbose_name='Email')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator('^\\+?237?\\d{9,15}$')], verbose_name='Téléphone')),
                ('company', models.CharField(blank=True, max_length=200, null=True, verbose_name='Entreprise')),
                ('website', models.URLField(blank=True, null=True, verbose_name='Site web')),
                ('subject', models.CharField(choices=[('general', 'Question générale'), ('support', 'Support technique'), ('partnership', 'Partenariat'), ('complaint', 'Plainte'), ('suggestion', 'Suggestion'), ('billing', 'Facturation'), ('delivery', 'Livraison'), ('restaurant', 'Restaurant'), ('other', 'Autre')], default='general', max_length=20, verbose_name='Sujet')),
                ('message', models.TextField(verbose_name='Message')),
                ('preferred_contact_method', models.CharField(choices=[('email', 'Email'), ('phone', 'Téléphone'), ('whatsapp', 'WhatsApp')], default='email', max_length=20, verbose_name='Méthode de contact préférée')),
                ('status', models.CharField(choices=[('new', 'Nouveau'), ('in_progress', 'En cours'), ('resolved', 'Résolu'), ('closed', 'Fermé')], default='new', max_length=20, verbose_name='Statut')),
                ('priority', models.CharField(choices=[('low', 'Basse'), ('medium', 'Moyenne'), ('high', 'Haute'), ('urgent', 'Urgente')], default='medium', max_length=10, verbose_name='Priorité')),
                ('utm_source', models.CharField(blank=True, max_length=100, null=True)),
                ('utm_medium', models.CharField(blank=True, max_length=100, null=True)),
                ('utm_campaign', models.CharField(blank=True, max_length=100, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Mis à jour le')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Résolu le')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Assigné à')),
            ],
            options={
                'verbose_name': 'Message de contact',
                'verbose_name_plural': 'Messages de contact',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ContactResponse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('response_text', models.TextField(verbose_name='Réponse')),
                ('is_public', models.BooleanField(default=False, verbose_name='Réponse publique')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('contact_message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='backend.contactmessage', verbose_name='Message de contact')),
                ('responder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Répondant')),
            ],
            options={
                'verbose_name': 'Réponse au contact',
                'verbose_name_plural': 'Réponses aux contacts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PartnerApplication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('partner_type', models.CharField(choices=[('restaurant', 'Restaurant'), ('delivery-agent', 'Agent de livraison'), ('investor', 'Investisseur'), ('other', 'Autre')], max_length=20, verbose_name='Type de partenaire')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('under_review', "En cours d'examen"), ('approved', 'Approuvé'), ('rejected', 'Rejeté'), ('on_hold', 'En attente'), ('additional_info_required', 'Informations supplémentaires requises')], default='pending', max_length=30, verbose_name='Statut')),
                ('contact_name', models.CharField(max_length=100, verbose_name='Nom du contact')),
                ('email', models.EmailField(max_length=254, validators=[django.core.validators.EmailValidator()], verbose_name='Email')),
                ('phone', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator('^\\+?237?\\d{9,15}$')], verbose_name='Téléphone')),
                ('business_name', models.CharField(blank=True, max_length=200, null=True, verbose_name="Nom de l'entreprise")),
                ('cuisine_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Type de cuisine')),
                ('capacity', models.PositiveIntegerField(blank=True, null=True, verbose_name='Capacité quotidienne')),
                ('opening_hours', models.CharField(blank=True, max_length=200, null=True, verbose_name="Heures d'ouverture")),
                ('address', models.TextField(blank=True, null=True, verbose_name='Adresse')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='Ville')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('legal_status', models.CharField(blank=True, choices=[('individual', 'Entreprise individuelle'), ('sarl', 'SARL'), ('sa', 'SA'), ('sas', 'SAS'), ('association', 'Association'), ('cooperative', 'Coopérative')], max_length=20, null=True, verbose_name='Statut juridique')),
                ('tax_id', models.CharField(blank=True, max_length=50, null=True, verbose_name="Numéro d'identification fiscale")),
                ('vehicle_type', models.CharField(blank=True, choices=[('motorcycle', 'Moto'), ('bicycle', 'Vélo'), ('car', 'Voiture'), ('scooter', 'Scooter'), ('on_foot', 'À pied')], max_length=20, null=True, verbose_name='Type de véhicule')),
                ('driving_license', models.CharField(blank=True, max_length=50, null=True, verbose_name='Numéro de permis')),
                ('investment_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name="Montant d'investissement")),
                ('investment_type', models.CharField(blank=True, choices=[('equity', 'Participation au capital'), ('loan', 'Prêt'), ('franchise', 'Franchise'), ('joint_venture', 'Coentreprise'), ('sponsorship', 'Parrainage')], max_length=20, null=True, verbose_name="Type d'investissement")),
                ('business_experience', models.PositiveIntegerField(blank=True, null=True, verbose_name="Années d'expérience")),
                ('service_type', models.CharField(blank=True, choices=[('marketing', 'Marketing'), ('technology', 'Technologie'), ('logistics', 'Logistique'), ('payment', 'Paiement'), ('consulting', 'Conseil'), ('other', 'Autre')], max_length=20, null=True, verbose_name='Type de service')),
                ('review_notes', models.TextField(blank=True, null=True, verbose_name="Notes d'examen")),
                ('rejection_reason', models.TextField(blank=True, null=True, verbose_name='Raison du rejet')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Mis à jour le')),
                ('reviewed_at', models.DateTimeField(blank=True, null=True, verbose_name='Examiné le')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='Approuvé le')),
                ('reviewer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_applications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Candidature de partenaire',
                'verbose_name_plural': 'Candidatures de partenaires',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PartnerDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('document_type', models.CharField(choices=[('id_document', "Document d'identité"), ('health_certificate', 'Certificat de santé'), ('menu', 'Menu'), ('driving_license', 'Permis de conduire'), ('vehicle_registration', 'Carte grise'), ('business_plan', "Plan d'affaires"), ('financial_statements', 'États financiers'), ('photo', 'Photo'), ('other', 'Autre')], max_length=30, verbose_name='Type de document')),
                ('file', models.FileField(upload_to=backend.models.upload_partner_document, verbose_name='Fichier')),
                ('original_filename', models.CharField(max_length=255, verbose_name='Nom de fichier original')),
                ('file_size', models.PositiveIntegerField(verbose_name='Taille du fichier')),
                ('mime_type', models.CharField(max_length=100, verbose_name='Type MIME')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='Téléchargé le')),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='backend.partnerapplication')),
            ],
            options={
                'verbose_name': 'Document partenaire',
                'verbose_name_plural': 'Documents partenaires',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.AddIndex(
            model_name='contactmessage',
            index=models.Index(fields=['status', 'created_at'], name='backend_con_status_3f4575_idx'),
        ),
        migrations.AddIndex(
            model_name='contactmessage',
            index=models.Index(fields=['subject', 'priority'], name='backend_con_subject_8bc020_idx'),
        ),
        migrations.AddIndex(
            model_name='contactmessage',
            index=models.Index(fields=['email'], name='backend_con_email_5e4e9a_idx'),
        ),
        migrations.AddIndex(
            model_name='partnerapplication',
            index=models.Index(fields=['partner_type', 'status'], name='backend_par_partner_e2a289_idx'),
        ),
        migrations.AddIndex(
            model_name='partnerapplication',
            index=models.Index(fields=['status', 'created_at'], name='backend_par_status_4bf76a_idx'),
        ),
        migrations.AddIndex(
            model_name='partnerapplication',
            index=models.Index(fields=['email'], name='backend_par_email_71e339_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='partnerdocument',
            unique_together={('application', 'document_type')},
        ),
    ]
